#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_ARB_shader_clock : enable

#include "raycommon.glsl"
#include "sampling.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba32f) uniform image2D image;

layout(location = 0) rayPayloadEXT hitPayload prd;

layout(binding = 0, set = 1) uniform CameraProperties{

	mat4 view;
	mat4 proj;
	mat4 viewInverse;
	mat4 projInverse;

}
cam;

layout(push_constant) uniform Constants
{
  vec4  clearColor;
  vec3  lightPosition;
  float lightIntensity;
  float areaLightRadius;
  int   lightType;
  int   maxDepth;
  int   frame;
  float accWeight;
  float mirrorGlossiness;
  float sphereGlossiness;
  float apertureRadius;
  float	focalLenght;
  //int   noOfSamples;
}
pushC;

void main() 
{
	#define M_PI 3.141592
	
	
	uint seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, int(clockARB()));

	const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
	const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
	vec2 d = inUV * 2.0 - 1.0;

	vec4 origin = cam.viewInverse * vec4(0, 0, 0, 1);
	vec4 target = cam.projInverse * vec4(d.x, d.y, 1, 1);
	vec4 direction = cam.viewInverse * vec4(normalize(target.xyz), 0);

	
	vec3 camRight = cam.view[0].xyz;
	vec3 camUp = cam.view[1].xyz;


	vec3 camForward =  cam.view[2].xyz;
	vec3 camPos = origin.xyz;
	
	vec4 focalPlane;
	vec3 focalPlanePoint = camPos + camForward * pushC.focalLenght;
	focalPlane.xyz = -camForward;
	focalPlane.w = -dot(focalPlane.xyz, focalPlanePoint);
	
	
	float angle = rnd(seed) * 2.0 * M_PI;
	float radius = sqrt(rnd(seed));
	vec2 offset = vec2(cos(angle), sin(angle)) * radius * pushC.apertureRadius;
	

	vec3 apertPos = camPos + camRight * offset.x + camUp * offset.y;


	vec3 rstart = camPos;
	vec3 rdir = direction.xyz;
    float t = abs(-(dot(rstart, focalPlane.xyz) + focalPlane.w) / dot(rdir, focalPlane.xyz));
	
	vec3 focusPos = rstart + rdir * t;
	origin.xyz = apertPos;
	direction.xyz = normalize(focusPos - apertPos);

	uint rayFlags = gl_RayFlagsOpaqueEXT;
	float tMin = 0.1;
	float tMax = 100000.0;

	prd.hitValue = vec3(0);
	prd.depth = 0;
	prd.attenuation = vec3(1.f, 1.f, 1.f);
	prd.done = 1;
	prd.rayOrigin = origin.xyz;
	prd.rayDir = direction.xyz;
	prd.seed = seed;

	vec3 hitValue = vec3(0);

	for(;;)
	{	
		
		traceRayEXT(
				topLevelAS,		//acceleration structure
				rayFlags,		//rayFlags
				0xFF,			//cullMask aka sort of collision matrix for insances
				0,				//sbtRecordOffset
				0,				//sbtRecordStride
				0,				//miss index
				origin.xyz,		//ray origin
				tMin,			//ray min range
				direction.xyz,	//ray direction
				tMax,			//ray max range
				0				//payload (location = 0)
			);

		hitValue += prd.hitValue * prd.attenuation;
				
		prd.depth++;
		if(prd.done == 1 || prd.depth >= pushC.maxDepth) break;

		
		origin.xyz = prd.rayOrigin;
		direction.xyz = prd.rayDir;
		prd.done = 1;
		

	}

	if(pushC.frame > 0){
		
		//float a         = 1.0f / float(pushC.frame + 1);
		vec3 oldColor = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
		imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(mix(oldColor, hitValue, pushC.accWeight), 1.0));
		//imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(mix(oldColor, prd.hitValue, a), 1.f));

	}else{

		 imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(hitValue, 1.0));
	}
   
}
